plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.sierraobryan.movie_db_api"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def apiKey = getValueFromPropertyOrEnv(project, "com.sierraobryan.moviedbapi.apiKey", "API_KEY")

        buildConfigField("String", "API_KEY", apiKey)
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

ext {
    moshiVersionCodeGen = "1.11.0"
    moshiVersion = "1.11.0"
    retrofitVersion = "2.9.0"

    gsonVersion = "2.8.6"

    daggerHiltVersion = "1.0.0-alpha02"
    daggerHiltCoreVersion = "2.29.1-alpha"

    preferencesDataStoreVersion = "1.0.0-alpha04"

}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation "androidx.fragment:fragment-ktx:1.2.5"

    // retrofit
    implementation "com.squareup.moshi:moshi:${moshiVersion}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${moshiVersion}"
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofitVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"

    implementation "com.google.code.gson:gson:${gsonVersion}"

    // hilt
    implementation "com.google.dagger:hilt-android:${daggerHiltCoreVersion}"
    implementation "androidx.hilt:hilt-common:${daggerHiltVersion}"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:${daggerHiltVersion}"
    kapt "androidx.hilt:hilt-compiler:${daggerHiltVersion}"
    kapt "com.google.dagger:hilt-android-compiler:${daggerHiltCoreVersion}"
    androidTestImplementation "com.google.dagger:hilt-android-testing:${daggerHiltCoreVersion}"
    kaptAndroidTest "com.google.dagger:hilt-compiler:${daggerHiltCoreVersion}"

    // Preferences DataStore
    implementation "androidx.datastore:datastore-preferences:${preferencesDataStoreVersion}"


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

static def getValueFromPropertyOrEnv(project, property, env, defaultValue = "") {
    def value

    if (project.hasProperty(property)) {
        value = project.property(property)
    } else {
        value = System.getenv(env)
    }

    if (value == null) {
        value = defaultValue
    }

    return value
}